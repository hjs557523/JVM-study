Proxy代理是一种设计模式，提供了对目标对象另外的访问方式，即通过代理对象访问目标对象。
好处：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。
编程思想：不能随意去修改别人已经写好的代码或者方法，如果需要修改或扩展，则自己通过定义代理的方式来扩展该方法。
代理模式关键点：代理对象与目标对象。代理对象是对目标对象的扩展，并会调用目标对象。

(1)静态代理
静态代理在使用时，需要定义接口或者父类，被代理对象(目标对象)与代理对象一起实现相同的接口或者是继承相同父类。
优点：对目标对象进行功能拓展
缺点：一个目标对象就要对应一个代理对象，类太多；一旦接口增加方法，目标对象与代理对象都要维护。

(2)动态代理/JDK代理
对比于静态代理，只需目标对象实现接口，动态代理的代理对象不需要实现接口；代理对象的生成是通过JDK的API，动态地在内存中构建代理对象
import java.lang.reflect.Proxy;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
java.lang.reflect.Proxy类的静态方法：newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)



